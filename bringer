#!/bin/bash

# todo: clean up
# todo: where can i use arrays, and do they make things faster?
# todo: re-implement "bringing", implement closing and history feature

function echoExtraEntries
{
    function echoSortLines
    {
	function echoSortLinesForDesktop
	{
	    function echoSortCommandsOnOneLine
	    {
		declare firstDone
		declare command
		while read command
		do
		    if [ ! $firstDone ] 
		    then
			firstDone=dummy
		    else
			echo -n " --- "
		    fi
		    echo -n "$command"
		done
	    }
	    
	    function prefixSuffix
	    {
		declare pair
		while read pair
		do
    		    echo "$1:$pair:$2"
		done
	    }
	    
	    declare commandWindowPairs=`echo -e "$1" | sort`
	    declare sortCommands=`echo "$commandWindowPairs" | cut -d : -f 1 | echoSortCommandsOnOneLine`
	    echo "$commandWindowPairs" | prefixSuffix "$sortCommands" "$2"
	}
	
	function getCommand
	{
	    ps -p $1 -o command= | sed "s/^[^ ]*\///"
	}
	
	declare -i lastDesktop=-1
	declare commandWindowPairs
	declare -i window
	declare -i desktop
	declare -i pid
	declare command
	declare line
	while read line
	do
	    window=`echo "$line" | cut -d " " -f 1`
	    desktop=`echo "$line" | cut -d " " -f 3`
	    pid=`echo "$line" | cut -d " " -f 4`
        # title=`echo "$line" | cut -d " " -f 1,2,3,4,5,6 --complement` 
	    command=`getCommand $pid`
	    if [ $desktop -ne $lastDesktop ]
	    then
		if [ $lastDesktop -ne -1 ]
		then
		    echoSortLinesForDesktop "$commandWindowPairs" "$lastDesktop"
 		fi
		commandWindowPairs=$command:$window
		lastDesktop=$desktop
	    else
		commandWindowPairs="$commandWindowPairs\n$command:$window"
	    fi
	done
	echoSortLinesForDesktop "$commandWindowPairs" "$lastDesktop"
    }
    
    function echoGotoLines
    {
	declare command
	declare -i window
	declare -i desktop
	declare commands
	declare lastCommands
	declare firstDone
	declare -i visibleDesktop=`wmctrl -d | grep \* | cut -d " " -f 1`
	declare -i counter=0
	declare line
	while read line
	do
	    command=`echo "$line" | cut -d : -f 2`
	    window=`echo "$line" | cut -d : -f 3`
	    desktop=`echo "$line" | cut -d : -f 4`
	    commands=`echo "$line" | cut -d : -f 1`
	    if [ "$commands" != "$lastCommands" ]
	    then
		if [ $firstDone ]
		then
		    echo
		fi
		firstDone=dummy
		echo -n "$counter goto $window "
 		if [ $desktop -eq $visibleDesktop ] 
		then
		    echo -n "*"
		fi
		echo -n "$commands"
		counter=$counter+1    
	    fi
	    lastCommands=$commands
	done
	echo
	echo "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------"

	function echoFrequencies
	{
	    declare -Ai frequencies
	    declare line
	    while read line
	    do
		frequencies["$line"]=${frequencies["$line"]}+1
	    done
	    for key in "${!frequencies[@]}"
	    do
		echo ${frequencies["$key"]} "$key"
	    done
	}

	function echoMFU
	{
	    declare line
	    while read line
	    do
		echo -n "$counter "
		echo "$line" | cut -d " " --complement -f 1
		counter=$counter+1    
	    done
	}
	cat .bringerHistory | echoFrequencies | sort -nr | echoMFU
	echo "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    }

    wmctrl -lp | echoSortLines | sort | echoGotoLines
}

declare line=`(echoExtraEntries;dmenu_path) | dmenu -i -l 11` 
echo $?
declare -i window
case "$line" in # todo: improve the case patterns
    *goto*)
	window=`echo "$line" | cut -d " " -f 3`
	wmctrl -ia $window
	;;
    # *bring*) # conflicts with "bringer"
    # 	window=`echo "$line" | cut -d " " -f 3`
    # 	wmctrl -iR $window
    # 	;;
    [0-9]*) # a pick from the history
	cp .bringerHistory .bringerHistoryTmp
	declare command=`echo "$line" | cut --complement -d " " -f 1`
	echo "$command" > .bringerHistory
	cat .bringerHistoryTmp >> .bringerHistory
	exec $command
	;;
    ?*) # non-empty string
	cp .bringerHistory .bringerHistoryTmp
	echo "$line" > .bringerHistory
	cat .bringerHistoryTmp >> .bringerHistory
	exec $line
	;;
esac
